#!/usr/bin/env bash

set -e      # Exit immediately if any command fails
set -u      # Using undefined variables is an error. Exit immediately

base_dir="$(cd "$(dirname "$0")/../.."; pwd)"
uiuck_dir="$base_dir/tests/ci/uiuc-k"
rvk_dir="$base_dir/tests/ci/rv-k"
tests_dir="$base_dir/tests/ethereum-tests"

# UIUC-K
# ======

use_uiuck() {
    git submodule update  --init "$uiuck_dir"
    (cd "$uiuck_dir"; mvn package -q -DskipTests)
    export PATH="$uiuck_dir/k-distribution/target/release/k/bin/:$PATH"
    export K_VERSION=uiuck
}

# RV-K
# ====

build_secp256k1() {
    local repo_dir="$base_dir/.build/secp256k1"
    local build_dir="$base_dir/.build/local"
    git submodule update  --init "$repo_dir"
    [[ -e "$build_dir/lib/libsecp256k1.a" ]] || (
        cd "$repo_dir"
        ./autogen.sh
        ./configure --enable-module-recovery --prefix="$build_dir"
        make -j4 install
    )

    export PKG_CONFIG_PATH="$build_dir/lib/pkgconfig:${PKG_CONFIG_PATH:-}"
}

use_rvk() {
    type opam >/dev/null || {
        echo >&2 '`opam` not installed`'
        exit 1
    }

    build_secp256k1

    git submodule update  --init "$rvk_dir"
    (cd "$rvk_dir"; mvn package -q -DskipTests)
    local release_dir="$rvk_dir/k-distribution/target/release/k"
    export \
        PATH="$release_dir/lib/native/linux:$release_dir/lib/native/linux64:$release_dir/bin/:$PATH" \
        LD_LIBRARY_PATH="$release_dir/lib/native/linux64:${LD_LIBRARY_PATH:-}"

    opam init --no-setup
    opam repository add k "$rvk_dir/k-distribution/target/release/k/lib/opam" \
        || opam repository set-url k "$rvk_dir/k-distribution/target/release/k/lib/opam"
    cp "$rvk_dir"/k-distribution/include/ocaml/fakelibs/{libffi.a,libz.a}
    export LIBFFI_LIBS="-L$rvk_dir/k-distribution/include/ocaml/fakelibs -lffi"
    export LIBFFI_CFLAGS="-I$rvk_dir/k-distribution/include/ocaml/fakelibs"
    opam update
    opam switch 4.03.0+k
    opam install --yes mlgmp zarith uuidm cryptokit secp256k1

    # TODO: some of RV's K's scripts don't set classpath correctly, and
    # kserver must be used.
    eval $(opam config env)
    export K_VERSION=rvk
}

# Common
# ======

[[ $# -ne 0 ]] || {
    echo >&2 "Usage: $0 [uiuck|rvk|bothk] <cmd>"
    exit 1
}

which_k="$1"; shift
case "$which_k" in
    uiuck) use_uiuck ; "$@" ;;
    rvk)   use_rvk   ; "$@" ;;
    bothk) use_rvk   ; "$@" ;
           use_uiuck ; "$@" ;;
    *)     echo >&2 "Unknown K: '$which_k'"; exit 1 ;;
esac
